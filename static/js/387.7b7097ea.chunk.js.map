{"version":3,"file":"static/js/387.7b7097ea.chunk.js","mappings":"kRAEaA,E,QAAOC,EAAAA,GAAH,kD,SCiDjB,EA7CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAW,GAFW,UAGAG,EAAAA,EAAAA,IAAaT,GAHb,OAGhBG,EAHgB,OAItBC,EAAWD,GAJW,gDAMtBO,QAAQC,IAAR,MANsB,yBAQtBL,GAAW,GARW,4EAAH,qDAYvBE,GACD,GAAE,CAACR,IAuBJ,OAAO,8BApBDK,GACK,SAACO,EAAA,EAAD,IACqB,IAAnBT,EAAQU,QACV,yBAAK,8CAGV,0BACE,SAACf,EAAD,UACGK,EAAQW,KAAI,SAAAC,GAAM,OACjB,2BACE,0BAAI,WAASA,EAAOC,WACpB,uBAAID,EAAOE,YAFJF,EAAOG,GADC,SAa9B,C,kMC/CDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,oGACJF,EAAAA,EAAAA,IAAA,qCAAwCC,IADpC,cACrBE,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAKbC,EAAoB,mCAAG,WAAMC,GAAN,uFACXP,EAAAA,EAAAA,IAAA,+BACGC,EADH,4DAC8DM,IAFnD,cAC5BJ,EAD4B,yBAI3BA,EAASC,KAAKC,SAJa,2CAAH,sDAOpBG,EAAiB,mCAAG,WAAM3B,GAAN,uFACRmB,EAAAA,EAAAA,IAAA,gBACZnB,EADY,oBACOoB,EADP,oBADQ,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBK,EAAS,mCAAG,WAAM5B,GAAN,uFACAmB,EAAAA,EAAAA,IAAA,gBACZnB,EADY,4BACeoB,EADf,oBADA,cACjBE,EADiB,yBAIhBA,EAASC,KAAKM,MAJE,2CAAH,sDAOTpB,EAAY,mCAAG,WAAMT,GAAN,uFACHmB,EAAAA,EAAAA,IAAA,gBACZnB,EADY,4BACeoB,EADf,2BADG,cACpBE,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,qD","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx","services/MovieApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchReviews } from 'services/MovieApi';\nimport Loader from 'components/Loader/Loader';\nimport { List } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchReviewsFilms = async () => {\n      try {\n        setLoading(true);\n        const reviews = await fetchReviews(movieId);\n        setReviews(reviews);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchReviewsFilms();\n  }, [movieId]);\n\n  const renderReviews = () => {\n    if (loading) {\n      return <Loader />;\n    } else if (reviews.length === 0) {\n      return <div>We don't have any reviews for this movie</div>;\n    } else {\n      return (\n        <div>\n          <List>\n            {reviews.map(review => (\n              <li key={review.id}>\n                <h2>Author: {review.author}</h2>\n                <p>{review.content}</p>\n              </li>\n            ))}\n          </List>\n        </div>\n      );\n    }\n  };\n\n  return <>{renderReviews()}</>;\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = 'df31fc31c1506c9b998d39d3a9f0dd23';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","movieId","useParams","useState","reviews","setReviews","loading","setLoading","useEffect","fetchReviewsFilms","fetchReviews","console","log","Loader","length","map","review","author","content","id","axios","API_KEY","fetchTrending","response","data","results","fetchSearchByKeyword","keyword","fetchMovieDetails","fetchCast","cast"],"sourceRoot":""}